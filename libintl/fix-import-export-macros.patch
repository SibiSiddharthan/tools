diff --git a/libgnuintl.in.h b/libgnuintl.h.in
index 6fb1920..8d7c49c 100644
--- a/libgnuintl.in.h
+++ b/libgnuintl.in.h
@@ -17,6 +17,20 @@
 #ifndef _LIBINTL_H
 #define _LIBINTL_H 1
 
+#ifdef _WIN32
+# ifdef BUILDING_LIBINTL
+#  define LIBINTL_API __declspec(dllexport)
+#  define LIBINTL_DLL_EXPORTED LIBINTL_API
+# else
+#  define LIBINTL_API __declspec(dllimport)
+# endif
+#else
+# if @HAVE_VISIBILITY@ && BUILDING_LIBINTL
+#  define LIBINTL_API __attribute__((__visibility__("default")))
+#  define LIBINTL_DLL_EXPORTED LIBINTL_API
+# else
+#  define LIBINTL_API
+# endif
+#endif
+
 #include <locale.h>
 #if (defined __APPLE__ && defined __MACH__) && @HAVE_NEWLOCALE@
 # include <xlocale.h>
@@ -55,7 +69,7 @@ extern "C" {
 
 /* Version number: (major<<16) + (minor<<8) + subminor */
 #define LIBINTL_VERSION 0x001500
-extern int libintl_version;
+extern LIBINTL_API int libintl_version;
 
 
 /* We redirect the functions to those prefixed with "libintl_".  This is
@@ -121,7 +135,7 @@ extern int libintl_version;
    LC_MESSAGES locale.  If not found, returns MSGID itself (the default
    text).  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_gettext (const char *__msgid)
+extern LIBINTL_API char *libintl_gettext (const char *__msgid)
        _INTL_MAY_RETURN_STRING_ARG (1);
 static inline
 _INTL_MAY_RETURN_STRING_ARG (1)
@@ -133,7 +147,7 @@ char *gettext (const char *__msgid)
 #ifdef _INTL_REDIRECT_MACROS
 # define gettext libintl_gettext
 #endif
-extern char *gettext (const char *__msgid)
+extern LIBINTL_API char *gettext (const char *__msgid)
        _INTL_ASM (libintl_gettext)
        _INTL_MAY_RETURN_STRING_ARG (1);
 #endif
@@ -141,7 +155,7 @@ extern char *gettext (const char *__msgid)
 /* Look up MSGID in the DOMAINNAME message catalog for the current
    LC_MESSAGES locale.  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_dgettext (const char *__domainname, const char *__msgid)
+extern LIBINTL_API char *libintl_dgettext (const char *__domainname, const char *__msgid)
        _INTL_MAY_RETURN_STRING_ARG (2);
 static inline
 _INTL_MAY_RETURN_STRING_ARG (2)
@@ -153,7 +167,7 @@ char *dgettext (const char *__domainname, const char *__msgid)
 #ifdef _INTL_REDIRECT_MACROS
 # define dgettext libintl_dgettext
 #endif
-extern char *dgettext (const char *__domainname, const char *__msgid)
+extern LIBINTL_API char *dgettext (const char *__domainname, const char *__msgid)
        _INTL_ASM (libintl_dgettext)
        _INTL_MAY_RETURN_STRING_ARG (2);
 #endif
@@ -161,7 +175,7 @@ extern char *dgettext (const char *__domainname, const char *__msgid)
 /* Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY
    locale.  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_dcgettext (const char *__domainname, const char *__msgid,
+extern LIBINTL_API char *libintl_dcgettext (const char *__domainname, const char *__msgid,
                                 int __category)
        _INTL_MAY_RETURN_STRING_ARG (2);
 static inline
@@ -174,7 +188,7 @@ char *dcgettext (const char *__domainname, const char *__msgid, int __category)
 #ifdef _INTL_REDIRECT_MACROS
 # define dcgettext libintl_dcgettext
 #endif
-extern char *dcgettext (const char *__domainname, const char *__msgid,
+extern LIBINTL_API char *dcgettext (const char *__domainname, const char *__msgid,
                         int __category)
        _INTL_ASM (libintl_dcgettext)
        _INTL_MAY_RETURN_STRING_ARG (2);
@@ -184,7 +198,7 @@ extern char *dcgettext (const char *__domainname, const char *__msgid,
 /* Similar to 'gettext' but select the plural form corresponding to the
    number N.  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_ngettext (const char *__msgid1, const char *__msgid2,
+extern LIBINTL_API char *libintl_ngettext (const char *__msgid1, const char *__msgid2,
                                unsigned long int __n)
        _INTL_MAY_RETURN_STRING_ARG (1) _INTL_MAY_RETURN_STRING_ARG (2);
 static inline
@@ -198,7 +212,7 @@ char *ngettext (const char *__msgid1, const char *__msgid2,
 #ifdef _INTL_REDIRECT_MACROS
 # define ngettext libintl_ngettext
 #endif
-extern char *ngettext (const char *__msgid1, const char *__msgid2,
+extern LIBINTL_API char *ngettext (const char *__msgid1, const char *__msgid2,
                        unsigned long int __n)
        _INTL_ASM (libintl_ngettext)
        _INTL_MAY_RETURN_STRING_ARG (1) _INTL_MAY_RETURN_STRING_ARG (2);
@@ -207,7 +221,7 @@ extern char *ngettext (const char *__msgid1, const char *__msgid2,
 /* Similar to 'dgettext' but select the plural form corresponding to the
    number N.  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_dngettext (const char *__domainname, const char *__msgid1,
+extern LIBINTL_API char *libintl_dngettext (const char *__domainname, const char *__msgid1,
                                 const char *__msgid2, unsigned long int __n)
        _INTL_MAY_RETURN_STRING_ARG (2) _INTL_MAY_RETURN_STRING_ARG (3);
 static inline
@@ -221,7 +235,7 @@ char *dngettext (const char *__domainname, const char *__msgid1,
 #ifdef _INTL_REDIRECT_MACROS
 # define dngettext libintl_dngettext
 #endif
-extern char *dngettext (const char *__domainname,
+extern LIBINTL_API char *dngettext (const char *__domainname,
                         const char *__msgid1, const char *__msgid2,
                         unsigned long int __n)
        _INTL_ASM (libintl_dngettext)
@@ -231,7 +245,7 @@ extern char *dngettext (const char *__domainname,
 /* Similar to 'dcgettext' but select the plural form corresponding to the
    number N.  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_dcngettext (const char *__domainname,
+extern LIBINTL_API char *libintl_dcngettext (const char *__domainname,
                                  const char *__msgid1, const char *__msgid2,
                                  unsigned long int __n, int __category)
        _INTL_MAY_RETURN_STRING_ARG (2) _INTL_MAY_RETURN_STRING_ARG (3);
@@ -247,7 +261,7 @@ char *dcngettext (const char *__domainname,
 #ifdef _INTL_REDIRECT_MACROS
 # define dcngettext libintl_dcngettext
 #endif
-extern char *dcngettext (const char *__domainname,
+extern LIBINTL_API char *dcngettext (const char *__domainname,
                          const char *__msgid1, const char *__msgid2,
                          unsigned long int __n, int __category)
        _INTL_ASM (libintl_dcngettext)
@@ -255,13 +269,11 @@ extern char *dcngettext (const char *__domainname,
 #endif
 
 
-#ifndef IN_LIBGLOCALE
-
 /* Set the current default message catalog to DOMAINNAME.
    If DOMAINNAME is null, return the current default.
    If DOMAINNAME is "", reset to the default of "messages".  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_textdomain (const char *__domainname);
+extern LIBINTL_API char *libintl_textdomain (const char *__domainname);
 static inline char *textdomain (const char *__domainname)
 {
   return libintl_textdomain (__domainname);
@@ -270,14 +282,14 @@ static inline char *textdomain (const char *__domainname)
 #ifdef _INTL_REDIRECT_MACROS
 # define textdomain libintl_textdomain
 #endif
-extern char *textdomain (const char *__domainname)
+extern LIBINTL_API char *textdomain (const char *__domainname)
        _INTL_ASM (libintl_textdomain);
 #endif
 
 /* Specify that the DOMAINNAME message catalog will be found
    in DIRNAME rather than in the system locale data base.  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_bindtextdomain (const char *__domainname,
+extern LIBINTL_API char *libintl_bindtextdomain (const char *__domainname,
                                      const char *__dirname);
 static inline char *bindtextdomain (const char *__domainname,
                                     const char *__dirname)
@@ -288,7 +300,7 @@ static inline char *bindtextdomain (const char *__domainname,
 #ifdef _INTL_REDIRECT_MACROS
 # define bindtextdomain libintl_bindtextdomain
 #endif
-extern char *bindtextdomain (const char *__domainname, const char *__dirname)
+extern LIBINTL_API char *bindtextdomain (const char *__domainname, const char *__dirname)
        _INTL_ASM (libintl_bindtextdomain);
 #endif
 
@@ -296,7 +308,7 @@ extern char *bindtextdomain (const char *__domainname, const char *__dirname)
 /* Specify that the DOMAINNAME message catalog will be found
    in WDIRNAME rather than in the system locale data base.  */
 #ifdef _INTL_REDIRECT_INLINE
-extern wchar_t *libintl_wbindtextdomain (const char *__domainname,
+extern LIBINTL_API wchar_t *libintl_wbindtextdomain (const char *__domainname,
                                          const wchar_t *__wdirname);
 static inline wchar_t *wbindtextdomain (const char *__domainname,
                                         const wchar_t *__wdirname)
@@ -307,7 +319,7 @@ static inline wchar_t *wbindtextdomain (const char *__domainname,
 #ifdef _INTL_REDIRECT_MACROS
 # define wbindtextdomain libintl_wbindtextdomain
 #endif
-extern wchar_t *wbindtextdomain (const char *__domainname,
+extern LIBINTL_API wchar_t *wbindtextdomain (const char *__domainname,
                                  const wchar_t *__wdirname)
        _INTL_ASM (libintl_wbindtextdomain);
 #endif
@@ -316,7 +328,7 @@ extern wchar_t *wbindtextdomain (const char *__domainname,
 /* Specify the character encoding in which the messages from the
    DOMAINNAME message catalog will be returned.  */
 #ifdef _INTL_REDIRECT_INLINE
-extern char *libintl_bind_textdomain_codeset (const char *__domainname,
+extern LIBINTL_API char *libintl_bind_textdomain_codeset (const char *__domainname,
                                               const char *__codeset);
 static inline char *bind_textdomain_codeset (const char *__domainname,
                                              const char *__codeset)
@@ -327,13 +339,11 @@ static inline char *bind_textdomain_codeset (const char *__domainname,
 #ifdef _INTL_REDIRECT_MACROS
 # define bind_textdomain_codeset libintl_bind_textdomain_codeset
 #endif
-extern char *bind_textdomain_codeset (const char *__domainname,
+extern LIBINTL_API char *bind_textdomain_codeset (const char *__domainname,
                                       const char *__codeset)
        _INTL_ASM (libintl_bind_textdomain_codeset);
 #endif
 
-#endif /* IN_LIBGLOCALE */
-
 
 /* Support for format strings with positions in *printf(), following the
    POSIX/XSI specification.
@@ -358,12 +368,12 @@ extern char *bind_textdomain_codeset (const char *__domainname,
 #if !(defined fprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef fprintf
 #define fprintf libintl_fprintf
-extern int fprintf (FILE *, const char *, ...);
+extern LIBINTL_API int fprintf (FILE *, const char *, ...);
 #endif
 #if !(defined vfprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef vfprintf
 #define vfprintf libintl_vfprintf
-extern int vfprintf (FILE *, const char *, va_list);
+extern LIBINTL_API int vfprintf (FILE *, const char *, va_list);
 #endif
 
 #if !(defined printf && defined _GL_STDIO_H) /* don't override gnulib */
@@ -374,30 +384,30 @@ extern int vfprintf (FILE *, const char *, va_list);
    mingw does not have a function __printf__.
    Alternatively, we could have done this redirection only when compiling with
    __GNUC__, together with a symbol redirection:
-       extern int printf (const char *, ...)
+       extern LIBINTL_API int printf (const char *, ...)
               __asm__ (#__USER_LABEL_PREFIX__ "libintl_printf");
    But doing it now would introduce a binary incompatibility with already
    distributed versions of libintl on these systems.  */
 # define libintl_printf __printf__
 #endif
 #define printf libintl_printf
-extern int printf (const char *, ...);
+extern LIBINTL_API int printf (const char *, ...);
 #endif
 #if !(defined vprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef vprintf
 #define vprintf libintl_vprintf
-extern int vprintf (const char *, va_list);
+extern LIBINTL_API int vprintf (const char *, va_list);
 #endif
 
 #if !(defined sprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef sprintf
 #define sprintf libintl_sprintf
-extern int sprintf (char *, const char *, ...);
+extern LIBINTL_API int sprintf (char *, const char *, ...);
 #endif
 #if !(defined vsprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef vsprintf
 #define vsprintf libintl_vsprintf
-extern int vsprintf (char *, const char *, va_list);
+extern LIBINTL_API int vsprintf (char *, const char *, va_list);
 #endif
 
 #if @HAVE_SNPRINTF@
@@ -405,12 +415,12 @@ extern int vsprintf (char *, const char *, va_list);
 #if !(defined snprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef snprintf
 #define snprintf libintl_snprintf
-extern int snprintf (char *, size_t, const char *, ...);
+extern LIBINTL_API int snprintf (char *, size_t, const char *, ...);
 #endif
 #if !(defined vsnprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef vsnprintf
 #define vsnprintf libintl_vsnprintf
-extern int vsnprintf (char *, size_t, const char *, va_list);
+extern LIBINTL_API int vsnprintf (char *, size_t, const char *, va_list);
 #endif
 
 #endif
@@ -420,12 +430,12 @@ extern int vsnprintf (char *, size_t, const char *, va_list);
 #if !(defined asprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef asprintf
 #define asprintf libintl_asprintf
-extern int asprintf (char **, const char *, ...);
+extern LIBINTL_API int asprintf (char **, const char *, ...);
 #endif
 #if !(defined vasprintf && defined _GL_STDIO_H) /* don't override gnulib */
 #undef vasprintf
 #define vasprintf libintl_vasprintf
-extern int vasprintf (char **, const char *, va_list);
+extern LIBINTL_API int vasprintf (char **, const char *, va_list);
 #endif
 
 #endif
@@ -434,24 +444,24 @@ extern int vasprintf (char **, const char *, va_list);
 
 #undef fwprintf
 #define fwprintf libintl_fwprintf
-extern int fwprintf (FILE *, const wchar_t *, ...);
+extern LIBINTL_API int fwprintf (FILE *, const wchar_t *, ...);
 #undef vfwprintf
 #define vfwprintf libintl_vfwprintf
-extern int vfwprintf (FILE *, const wchar_t *, va_list);
+extern LIBINTL_API int vfwprintf (FILE *, const wchar_t *, va_list);
 
 #undef wprintf
 #define wprintf libintl_wprintf
-extern int wprintf (const wchar_t *, ...);
+extern LIBINTL_API int wprintf (const wchar_t *, ...);
 #undef vwprintf
 #define vwprintf libintl_vwprintf
-extern int vwprintf (const wchar_t *, va_list);
+extern LIBINTL_API int vwprintf (const wchar_t *, va_list);
 
 #undef swprintf
 #define swprintf libintl_swprintf
-extern int swprintf (wchar_t *, size_t, const wchar_t *, ...);
+extern LIBINTL_API int swprintf (wchar_t *, size_t, const wchar_t *, ...);
 #undef vswprintf
 #define vswprintf libintl_vswprintf
-extern int vswprintf (wchar_t *, size_t, const wchar_t *, va_list);
+extern LIBINTL_API int vswprintf (wchar_t *, size_t, const wchar_t *, va_list);
 
 #endif
 
@@ -464,19 +474,19 @@ extern int vswprintf (wchar_t *, size_t, const wchar_t *, va_list);
 #ifndef GNULIB_defined_newlocale /* don't override gnulib */
 #undef newlocale
 #define newlocale libintl_newlocale
-extern locale_t newlocale (int, const char *, locale_t);
+extern LIBINTL_API locale_t newlocale (int, const char *, locale_t);
 #endif
 
 #ifndef GNULIB_defined_duplocale /* don't override gnulib */
 #undef duplocale
 #define duplocale libintl_duplocale
-extern locale_t duplocale (locale_t);
+extern LIBINTL_API locale_t duplocale (locale_t);
 #endif
 
 #ifndef GNULIB_defined_freelocale /* don't override gnulib */
 #undef freelocale
 #define freelocale libintl_freelocale
-extern void freelocale (locale_t);
+extern LIBINTL_API void freelocale (locale_t);
 #endif
 
 #endif
@@ -488,7 +498,7 @@ extern void freelocale (locale_t);
 #ifndef GNULIB_defined_setlocale /* don't override gnulib */
 #undef setlocale
 #define setlocale libintl_setlocale
-extern char *setlocale (int, const char *);
+extern LIBINTL_API char *setlocale (int, const char *);
 #endif
 
 #if @HAVE_NEWLOCALE@
@@ -497,7 +507,7 @@ extern char *setlocale (int, const char *);
 #define newlocale libintl_newlocale
 /* Declare newlocale() only if the system headers define the 'locale_t' type. */
 #if !(defined __CYGWIN__ && !defined LC_ALL_MASK)
-extern locale_t newlocale (int, const char *, locale_t);
+extern LIBINTL_API locale_t newlocale (int, const char *, locale_t);
 #endif
 
 #endif
@@ -513,7 +523,7 @@ extern locale_t newlocale (int, const char *, locale_t);
    prefixes should be directory names without trailing slash (i.e. use ""
    instead of "/").  */
 #define libintl_set_relocation_prefix libintl_set_relocation_prefix
-extern void
+extern LIBINTL_API void
        libintl_set_relocation_prefix (const char *orig_prefix,
                                       const char *curr_prefix);
 
